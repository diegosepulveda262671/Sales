@page "/states/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (state is null)
{


    <p>Cargando...</p>
}
else
{
    <h3>@state.Name</h3>

    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
        <div>
            <a class="btn btn-primary" href="/cities/create/@Id">Nueva Ciudad</a>
            <a class="btn btn-success" href="/countries/details/@state.CountryId">Regresar</a>
        </div>
        <div class="mx-2">
            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar ciudad..." @bind-value="Filter" />
        </div>
        <div>
            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
        </div>
    </div>


    <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPage" />


    <GenericList MyList="cities">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>

                        <th>Ciudad</th>
                        <th style="width:180px"></th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var city in cities!)
                    {

                        <tr>
                            <td>
                                @city.Name
                            </td>

                            <td>

                                <a class="btn btn-warning" href="/cities/edit/@city.Id">Editar</a>
                                <button class="btn btn-danger" @onclick=@(()=>DeleteAsync(city.Id))>Borrar</button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>

}

@code{
    private List<City>? cities;
    private State? state;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }


    private async Task LoadAsync(int page = 1)
    {


        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/cities?id={Id}&page={page}";
            url2 = $"api/cities/totalPages?id={Id}";
        }
        else
        {
            url1 = $"api/cities?id={Id}&page={page}&filter={Filter}";
            url2 = $"api/cities/totalPages?id={Id}&filter={Filter}";
        }


        var responseHppt = await repository.Get<State>($"api/states/{Id}");
        var responseHppt2 = await repository.Get<List<City>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);
        state = responseHppt.Response;
        cities = responseHppt2.Response;
        totalPages = responseHppt3.Response;
    }


    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Realmente deseas eliminar el registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Si",
            CancelButtonText = "No"

        });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"/api/cities/{id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();

    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }


}


