@inject SweetAlertService sweetAlertService
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />


<EditForm EditContext="editContex" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Estado/Departamento</label>
        <div>
            <InputText class="form-control" @bind-Value="@State.Name"></InputText>
            <ValidationMessage For="@(()=>State.Name)" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-primary" @onclick="ReturnAction">Regresar</button>

</EditForm>

@code {

    private EditContext editContex = null!;


    [Parameter]
    [EditorRequired]
    public State State { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessFully { get; set; }

    protected override void OnInitialized()
    {
        editContex = new(State);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContex.IsModified();
        if (!formWasMofied || FormPostedSuccessFully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Deseas abandonar la página y perder los cambios?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });
        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();

    }

}



