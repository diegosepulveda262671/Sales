@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (country is null)
{


    <p>Cargando...</p>
}
else
{
    <h3>@country.Name</h3>
    <div class="mb-2">
        <a class="btn btn-primary " href="/states/create/@Id">Nuevo Estado/departamento</a>
        <a class="btn btn-success " href="/countries">regresar</a>
    </div>

    <GenericList MyList="states">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>

                        <th>Estado/departamento</th>
                        <th>Ciudades</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var state in states!)
                    {

                        <tr>
                            <td>
                                @state.Name
                            </td>
                            <td>
                                @state.CitiesCount
                            </td>
                            <td>
                                <a class="btn btn-info" href="/states/details/@state.Id">Detalles</a>
                                <a class="btn btn-warning" href="/states/edit/@state.Id">Editar</a>
                                <button class="btn btn-danger" @onclick=@(()=>DeleteAsync(state.Id))>Borrar</button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>

}

@code{
    private List<State>? states;
    private Country? country;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }


    private async Task LoadAsync()
    {
        var responseHTTP = await repository.Get<Country>($"/api/countries/{Id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        }

        country = responseHTTP.Response;
        states = country!.States!.ToList();
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Realmente deseas eliminar el registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Si",
            CancelButtonText = "No"

        });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"/api/states/{id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();

    }
}


