@page "/countries"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@using Sales.WEB.Shared
<h3>Países</h3>

<a class="btn btn-primary mb-3" href="/countries/create">Nuevo País</a>

<GenericList MyList="countries">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>País</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in countries!)
                {

                    <tr>
                        <td>
                            <a  class="btn btn-warning" href="/countries/edit/@country.Id" >Editar</a>
                            <button  class="btn btn-danger" @onclick=@(()=>DeleteAsync(country.Id))>Borrar</button>
                        </td>
                        <td>
                            @country.Name
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>




@code {
    public List<Country>? countries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<List<Country>>("/api/countries");
        countries = responseHttp.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Realmente deseas eliminar el registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Si",
            CancelButtonText = "No"

        });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"/api/countries/{id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error",message,SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();

    }
}

